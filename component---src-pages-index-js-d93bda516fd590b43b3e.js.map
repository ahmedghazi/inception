{"version":3,"sources":["webpack:///./src/components/webcam.js","webpack:///./src/components/post.js","webpack:///./src/pages/index.js"],"names":["Webcam","props","_this","_Component","call","this","state","vid","stream","init","bind","assertThisInitialized_default","camSuccess","camFail","componentDidMount","refs","video","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","window","URL","webkitURL","msURL","mozURL","mediaDevices","then","catch","alert","err","console","log","srcObject","src","createObjectURL","onloadedmetadata","render","react_default","a","createElement","className","autoPlay","ref","Component","Post","index","style","zIndex","transform","webcam","videoID","require","length","_renderItems","Array","from","val","map","post","key","animationDelay","siteMetadata","data","site","id","Helmet","title","name","content","description","property","url","banner","query"],"mappings":"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","file":"component---src-pages-index-js-d93bda516fd590b43b3e.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Webcam extends Component {\n    constructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {};\n\n\t\tthis.vid = null;\n\t\tthis.stream = null;\n\n\t\tthis.init = this.init.bind(this);\n\t\tthis.camSuccess = this.camSuccess.bind(this);\n\t\tthis.camFail = this.camFail.bind(this);\n    }\n    \n    componentDidMount(){\n        this.init()\n    }\n\n    init(){\n        //const {videoID} = this.props\n        //console.log(\"videoID\")\n        //this.vid = document.getElementById(videoID);\n        this.vid = this.refs.video;\n        //this.vid.addEventListener('canplay', this.enablestart, false);\n      \n        navigator.getUserMedia = navigator.getUserMedia \n\t\t|| navigator.webkitGetUserMedia \n\t\t|| navigator.mozGetUserMedia \n\t\t|| navigator.msGetUserMedia;\n\t\twindow.URL = window.URL \n\t\t|| window.webkitURL \n\t\t|| window.msURL \n        || window.mozURL;\n        \n\t\t// check for camerasupport\n\t\tif (navigator.mediaDevices) {\n            navigator.mediaDevices\n            .getUserMedia({video : true})\n            .then(this.camSuccess)\n            .catch(this.camFail);\n\t\t} else if (navigator.getUserMedia) {\n\t\t\tnavigator.getUserMedia({video : true}, this.camSuccess, this.camFail);\n\t\t} else {\n\t\t\talert(\"This demo depends on getUserMedia, which your browser does not seem to support. :(\");\n\t\t}\n    }\n\n    camFail(err) {\n\t\t//alert(\"Scared of NSA?\");\n\t\tconsole.log(err)\n\t\n\t}\n\tcamSuccess( stream ) {\n\t\tthis.stream = stream;\n\t\t\n\t\t// add camera stream if getUserMedia succeeded\n\t\tif (\"srcObject\" in this.vid) {\n\t\t\tthis.vid.srcObject = stream;\n\t\t} else {\n\t\t\tthis.vid.src = (window.URL && window.URL.createObjectURL(stream));\n\t\t}\n\t\tthis.vid.onloadedmetadata = function() {\n            //console.log(\"loaded\")\n\t\t\t//adjustVideoProportions();\n\t\t\t//this.vid.play();\n\t\t}\n\t\n\t}\n\t\n\n    render() {\n        return (\n            <div className=\"video-wrapper\">\n                <video \n                autoPlay\n                ref=\"video\" src=\"../videos/test.mp4\"></video>\n            </div>\n        );\n    }\n}\n\nexport default Webcam;","import React, { Component } from 'react';\nimport Webcam from './webcam'\n\nclass Post extends Component {\n    render() {\n        const { index } = this.props\n        //const scale = 1 - (index * 0.20)\n        //const scale = 1 - (index * 0.27)\n        const scale = 1 - (index * 0.07)\n        //console.log(index, scale)\n        const style = {\n            zIndex: index,\n            transform: 'translate(-50%, -50%) scale('+scale+')'\n        }\n        return (\n            <div className=\"post\" style={style}>\n                <div className=\"header\"></div>\n                <div className=\"me\">\n                    <Webcam videoID={\"web-cam-\"+index} />\n                </div>\n                <div className=\"footer\"></div>\n            </div>\n        );\n    }\n}\n\nexport default Post;","import React, { Component } from 'react';\nimport {Helmet} from \"react-helmet\";\nimport Post from '../components/post';\n\nrequire('../styles/style.scss')\n\nclass index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            length: 10,\n        }\n    }\n\n    _renderItems(){\n        const {length} = this.state\n        \n        const arr = Array.from(new Array(length),(val,index)=>index);\n        return arr.map(index => (\n                <Post \n                key={index}\n                index={index} \n                style={{\n                    animationDelay: index+\"00ms\"\n                }} />\n        ))\n        //return items\n    }\n    \n    render() {\n        const {data} = this.props\n        const {siteMetadata} = data.site\n        console.log(siteMetadata)\n        return (\n            <div id=\"wrapper\">\n                <Helmet>\n                    <title>{siteMetadata.title}</title>\n                    <meta name=\"description\" content={siteMetadata.description} />\n\n                    {/* <!-- Open Graph / Facebook --> */}\n                    <meta property=\"og:type\" content=\"website\" />\n                    <meta property=\"og:url\" content={siteMetadata.url} />\n                    <meta property=\"og:title\" content={siteMetadata.title} />\n                    <meta property=\"og:description\" content={siteMetadata.description} />\n                    <meta property=\"og:image\" content={siteMetadata.banner} />\n                    {/* <!-- Twitter --> */}\n                    <meta property=\"twitter:card\" content=\"summary_large_image\" />\n                    <meta property=\"twitter:url\" content={siteMetadata.url} />\n                    <meta property=\"twitter:title\" content={siteMetadata.title} />\n                    <meta property=\"twitter:description\" content={siteMetadata.description} />\n                    <meta property=\"twitter:image\" content={siteMetadata.banner} />\n                    \n                </Helmet>\n\n                <main>\n                    {this._renderItems()}\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default index;\n\nexport const query = graphql`\n  query SiteTitleQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        url\n        banner\n      }\n    }\n  }\n`"],"sourceRoot":""}